// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(ClinicaContext))]
    partial class ClinicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Entities.Armazem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Armazems");
                });

            modelBuilder.Entity("Domain.Entities.Ator.TipoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoUsuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Administrativo",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Dentista",
                            Role = "Dentista"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Cliente",
                            Role = "Cliente"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Recepcionista",
                            Role = "Recepcionista"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ator.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TipoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EnderecoId");

                    b.HasIndex("TipoId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DentistaId")
                        .HasColumnType("uuid");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("DentistaId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArmazemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataDeAdicao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArmazemId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Imagens")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProntuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.PerguntaBooleana", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Pergunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProntuarioId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Resposta")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("PerguntaBooleana");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Perguntastring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Perunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProntuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reposta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Perguntastring");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Prontuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Prontuarios");
                });

            modelBuilder.Entity("Domain.Entities.Ator.Cliente", b =>
                {
                    b.HasBaseType("Domain.Entities.Ator.Usuario");

                    b.Property<Guid?>("ProntuarioId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReponsavelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResponsavelId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProntuarioId");

                    b.HasIndex("ReponsavelId");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("Domain.Entities.Ator.Dentista", b =>
                {
                    b.HasBaseType("Domain.Entities.Ator.Usuario");

                    b.Property<string>("Cro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Cro")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Dentista");
                });

            modelBuilder.Entity("Domain.Entities.Ator.Recepcionista", b =>
                {
                    b.HasBaseType("Domain.Entities.Ator.Usuario");

                    b.HasDiscriminator().HasValue("Recepcionista");
                });

            modelBuilder.Entity("Domain.Entities.Armazem", b =>
                {
                    b.HasOne("Domain.Entities.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Domain.Entities.Ator.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.HasOne("Domain.Entities.Ator.TipoUsuario", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");

                    b.Navigation("Endereco");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Domain.Entities.Consulta", b =>
                {
                    b.HasOne("Domain.Entities.Ator.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ator.Dentista", "Dentista")
                        .WithMany()
                        .HasForeignKey("DentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Dentista");
                });

            modelBuilder.Entity("Domain.Entities.Produto", b =>
                {
                    b.HasOne("Domain.Entities.Armazem", null)
                        .WithMany("Produtos")
                        .HasForeignKey("ArmazemId");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Documento", b =>
                {
                    b.HasOne("Domain.Entities.Prontuario.Prontuario", null)
                        .WithMany("Documentos")
                        .HasForeignKey("ProntuarioId");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.PerguntaBooleana", b =>
                {
                    b.HasOne("Domain.Entities.Prontuario.Prontuario", null)
                        .WithMany("PerguntaBooleanas")
                        .HasForeignKey("ProntuarioId");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Perguntastring", b =>
                {
                    b.HasOne("Domain.Entities.Prontuario.Prontuario", null)
                        .WithMany("PerguntasString")
                        .HasForeignKey("ProntuarioId");
                });

            modelBuilder.Entity("Domain.Entities.Ator.Cliente", b =>
                {
                    b.HasOne("Domain.Entities.Prontuario.Prontuario", "Prontuario")
                        .WithMany()
                        .HasForeignKey("ProntuarioId");

                    b.HasOne("Domain.Entities.Ator.Cliente", "Reponsavel")
                        .WithMany()
                        .HasForeignKey("ReponsavelId");

                    b.Navigation("Prontuario");

                    b.Navigation("Reponsavel");
                });

            modelBuilder.Entity("Domain.Entities.Armazem", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.Prontuario.Prontuario", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("PerguntaBooleanas");

                    b.Navigation("PerguntasString");
                });
#pragma warning restore 612, 618
        }
    }
}
